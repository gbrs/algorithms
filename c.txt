**Минимальные остовы**
https://algorithmica.org/ru/mst

// Алгоритм Прима
// тупой перебор ребер n-1 раз, выбирая самое короткое ребро к вершине, которая еще не в остове
const int maxn = 1e5, inf = 1e9;
vector from, to, weight;  // не вектор из троек (откуда, куда, расстояние), а 3 отдельных массива
bool used[maxn]

// считать все рёбра в массивы

used[0] = 1;
for (int i = 0; i < n-1; i++) {  // n-1 раз (количество ребер в дереве) повторяем внутренний цикл
    int opt_w = inf, opt_from, opt_to;
    for (int j = 0; j < m; j++)  // перебираем все ребра, запоминая самое короткое
        // если вес меньше, если в стартовая вершина уже в остове, а финишная - нет
        if (opt_w > weight[j] && used[from[j]] && !used[to[j]])
            opt_w = weight[j], opt_from = from[j], opt_to = to[j]  // текущее минимальное ребро
    used[opt_to] = 1;  // добавляем в остов финишную вершинку
    cout << opt_from << " " << opt_to << endl;
}

---

//

vector< pair<int, int> > g[maxn]; ???
set< pair<int, int> > q;  // очередь как в Дейкстре (дистанция, вершина)
int d[maxn];  // массив расстояний до вершин
// засунуть в q стартовую вершину

while (q.size()) {
    // достаем из очереди первый элемент
    v = q.begin()->second;
    q.erase(q.begin());

    for (auto e : g[v]) {
        int u = e.first, w = e.second;
        if (w < d[u]) {
            q.erase({d[u], u});
            d[u] = w;
            q.insert({d[u], u});
        }
    }
}

--------------

#include <bits/stdc++.h>
using namespace std;

int main() {
    int n = 5;
    int m = 5;
    // список смежности. Нумерация вершин в этом коде от нуля
    vector <vector< pair<int,int>>> smezh(m);
    const int INF = 1e9; // значение "бесконечность"


    smezh[0].push_back({1, 2}); // edge from vertex 0 to 1 with weight 2
    smezh[1].push_back({0, 2}); // edge from vertex 1 to 0 with weight 2

    smezh[0].push_back({3, 6}); // edge from vertex 0 to 3 with weight 6
    smezh[3].push_back({0, 6}); // edge from vertex 3 to 0 with weight 6

    smezh[1].push_back({2, 3}); // edge from vertex 1 to 2 with weight 3
    smezh[2].push_back({1, 3}); // edge from vertex 2 to 1 with weight 3

    smezh[1].push_back({3, 8}); // edge from vertex 1 to 3 with weight 8
    smezh[3].push_back({1, 8}); // edge from vertex 3 to 1 with weight 8

    smezh[1].push_back({4, 5}); // edge from vertex 1 to 4 with weight 5
    smezh[4].push_back({1, 5}); // edge from vertex 4 to 1 with weight 5

    smezh[2].push_back({4, 7}); // edge from vertex 2 to 4 with weight 7
    smezh[4].push_back({2, 7}); // edge from vertex 4 to 2 with weight 7

    smezh[3].push_back({4, 9}); // edge from vertex 3 to 4 with weight 9
    smezh[4].push_back({3, 9}); // edge from vertex 4 to 3 with weight 9

    // д.б. 0 1 2 4 3: 01 12 14 03


    /*
    smezh[0].push_back({1, 7});
    smezh[1].push_back({0, 7});

    smezh[0].push_back({3, 6});
    smezh[3].push_back({0, 6});

    smezh[1].push_back({2, 3});
    smezh[2].push_back({1, 3});

    smezh[1].push_back({3, 1});
    smezh[3].push_back({1, 1});

    smezh[1].push_back({4, 5});
    smezh[4].push_back({1, 5});

    smezh[2].push_back({4, 4});
    smezh[4].push_back({2, 4});

    smezh[3].push_back({4, 2});
    smezh[4].push_back({3, 2});

    // д.б. 0 3 1 2 4:  03 31 34 12
    */

    /*
    for (int i = 0; i < n; ++i) {
        cout << i  << ':' << endl;
        for (int j = 0; j < smezh[i].size(); j++) {
            cout << smezh[i][j].first << '-' << smezh[i][j].second << ' ';
        }
        cout << endl;
    }
    */



    // алгоритм
    vector <int> dist(n, INF); // расстояние до остова
    vector <int> roditeli(n, -1);  // и родителей заодно хранить здесь же будем
    vector <int> used(n, 0);
    set < pair<int,int> > q;  // приоритетная очередь
    int v, to, dlina;

    q.insert ({0, 0});  // загружаем в очередь стартовую вершину
    dist[0] = 0;
    used[0] = 1;

    for (int i = 0; i < n; ++i) {

    	if (q.empty()) {
    		cout << "NO";
    		return 0;
    	}

        // попаем из очереди наименьшее ребро, запоминаем его финишную вершину
    	v = q.begin()->second;
    	q.erase (q.begin());

    	// если родительница вершины v уже в остове, то выводим ребро.
    	// Это не срабатывает только на первом цикле?
    	if (roditeli[v] != -1) {
    	    cout << "add " << roditeli[v] << " -> " << v << endl;
    	    used[v] = 1;
    	}

        // обегаем всех соседей вершины v
    	for (int j = 0; j < smezh[v].size(); j++) {
    		to = smezh[v][j].first;
    		dlina = smezh[v][j].second;
    		cout << v << "->" << to << ' ' << dlina;
    		// для вершин to, которые еще не в остове:
    		// если нашли путь от вершины to до остова короче,
    		// записываем его в dist и q
    		if (used[to] == 0 & dlina < dist[to]) {
    			q.erase ({dist[to], to});
    			dist[to] = dlina;
    			roditeli[to] = v;
    			cout << " in q" << endl;
    			q.insert ({dist[to], to});
    		} else {
    		    cout << endl;
    		}
    	}
    }
}

/*
// входные данные
int n;
vector < vector < pair<int,int> > > g;
const int INF = 1000000000; // значение "бесконечность"

// алгоритм
vector<int> min_e (n, INF), sel_e (n, -1);
min_e[0] = 0;
set < pair<int,int> > q;
q.insert (make_pair (0, 0));
for (int i=0; i<n; ++i) {
	if (q.empty()) {
		cout << "No MST!";
		exit(0);
	}
	int v = q.begin()->second;
	q.erase (q.begin());

	if (sel_e[v] != -1)
		cout << v << " " << sel_e[v] << endl;

	for (size_t j=0; j<g[v].size(); ++j) {
		int to = g[v][j].first,
			cost = g[v][j].second;
		if (cost < min_e[to]) {
			q.erase (make_pair (min_e[to], to));
			min_e[to] = cost;
			sel_e[to] = v;
			q.insert (make_pair (min_e[to], to));
		}
	}
}
*/

